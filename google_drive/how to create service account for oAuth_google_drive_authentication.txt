To authenticate with the Google Drive API without invoking a browser for a Google account, you can use a Service Account. A Service Account is ideal for server-to-server interactions and does not require user authentication through a web browser. This is often used in backend scripts or automated processes where user interaction is not required. Here’s how you can set up and authenticate using a Service Account for Google Drive API:
Prerequisites:

    Google Cloud Project: You need a Google Cloud project with the Google Drive API enabled.
    Service Account: Create a Service Account within your Google Cloud project.
    Service Account Key: Download the JSON key file for your Service Account.

Steps to Set Up Google Drive API Authentication Using a Service Account:
Step 1: Enable the Google Drive API

    Go to the Google Cloud Console.
    Select your project or create a new one.
    Go to APIs & Services > Library.
    Search for "Google Drive API" and enable it.

Step 2: Create a Service Account

    In the Google Cloud Console, navigate to APIs & Services > Credentials.
    Click on Create Credentials > Service Account.
    Fill in the necessary information (Service Account name, description, etc.) and click Create.
    Once the Service Account is created, click Done.

Step 3: Generate a Service Account Key

    In the Credentials page, find your Service Account and click on it.
    Go to the Keys section and click Add Key > JSON.
    A JSON file will be downloaded. This file contains your Service Account credentials.

Step 4: Grant Access to the Service Account

If you want the Service Account to access a specific Google Drive folder, you need to share that folder with the Service Account’s email address:

    Go to Google Drive and find the folder you want the Service Account to access.
    Right-click the folder, select Share, and add the Service Account’s email (usually in the format service-account-name@project-id.iam.gserviceaccount.com).

Step 5: Authenticate Using Python

To authenticate the Service Account using the downloaded JSON key file in Python, use the google-auth and googleapiclient libraries:




Key Points:

    This approach uses the Service Account to authenticate, bypassing the need for OAuth consent screens or user interaction through a browser.
    The Service Account operates under its own Google Drive space but can access shared files and folders if explicitly given permission.
    This setup is ideal for automation scripts running on servers or environments where user interaction is not possible.

By following the above steps, you can interact with the Google Drive API without needing to invoke a browser for authentication.


# code 
pip install google-auth google-auth-oauthlib google-auth-httplib2 google-api-python-client

from google.oauth2 import service_account
from googleapiclient.discovery import build

# Path to the JSON key file downloaded from Google Cloud
SERVICE_ACCOUNT_FILE = 'path/to/your-service-account-file.json'

# Define the required scopes for accessing Google Drive
SCOPES = ['https://www.googleapis.com/auth/drive']

# Authenticate using the Service Account
credentials = service_account.Credentials.from_service_account_file(
    SERVICE_ACCOUNT_FILE, scopes=SCOPES)

# Build the Google Drive API client
service = build('drive', 'v3', credentials=credentials)

# Example: List the first 10 files in Google Drive
results = service.files().list(pageSize=10).execute()
items = results.get('files', [])

if not items:
    print('No files found.')
else:
    print('Files:')
    for item in items:
        print(f"{item['name']} ({item['id']})")
